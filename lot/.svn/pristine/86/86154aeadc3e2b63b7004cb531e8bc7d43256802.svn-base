<template>
  <div class="happy_too">
    <div class="footer1">
      <div class="img">
        <span class="s1" @click="add_money(10)"></span>
        <span class="s2" @click="add_money(20)"></span>
        <span class="s3" @click="add_money(50)"></span>
        <span class="s4" @click="add_money(100)"></span>
        <span class="s5" @click="add_money(500)"></span>
        <span class="s6" @click="add_money(1000)"></span>
      </div>
      <button type="button" class="one"><span class="left">金额￥</span><I-Input @on-change="change_money()" :maxlength="9" style="width: 100px" size="small"
                                                                            v-model="money" @on-keyup="push_money()"
                                                                            @on-afterpaste="push_money()"></I-Input>
      </button>
      <button type="button" class="two" style="padding: 8px;" @click="go_to()">立即下注</button>
      <button type="button" class="two" style="padding: 8px;margin-right:20px;" @click="reset()">重置</button>
    </div>
    <div class="box">
      <div style="width: 880px; overflow: hidden;">
        <ul class="ul1">
          <li class="thend">总合</li>
        </ul>
        <ul v-for="item in toplist" class="ul2">
          <li v-for="(key,index) in item.object" :class="[key.flag?'styleclect':'']">
            <span class="one" @click="myclick(key,index)">{{key.test}}</span>
            <span class="tow" @click="myclick(key,index)">{{key.odd}}</span>
            <span class="three" @click.self="myclick(key,index)">
              <I-Input @on-keydown="tab_now(key)" @on-change="onchange(key)" :maxlength="9" class="inp" ref="myfocus" style="width: 60px" @on-focus="onfocus(key)" v-model="key.money" size="small"
                     @on-keyup="gogo(key)" @on-afterpaste="gogo(key)"></I-Input>
            </span>
          </li>
        </ul>
      </div>
      <div class="box3">
        <ul v-for="item in centerlist" class="fl">
          <li class="thend">{{item.name}}</li>
          <li v-for="(key,index) in item.object" :class="[key.flag?'styleclect':'']">
            <span class="one" @click="myclick(key,index)">{{key.test}}</span>
            <span class="tow" @click="myclick(key,index)">{{key.odd}}</span>
            <span class="three" @click.self="myclick(key,index)">
              <I-Input @on-keydown="tab_now(key)" @on-change="onchange(key)" :maxlength="9" class="inp" ref="myfocus" style="width: 60px" @on-focus="onfocus(key)" v-model="key.money" size="small"
                     @on-keyup="gogo(key)" @on-afterpaste="gogo(key)"></I-Input>
            </span>
          </li>
        </ul>
      </div>
    </div>
    <div class="footer1" style="margin-bottom: 20px">
      <div class="img">
        <span class="s1" @click="add_money(10)"></span>
        <span class="s2" @click="add_money(20)"></span>
        <span class="s3" @click="add_money(50)"></span>
        <span class="s4" @click="add_money(100)"></span>
        <span class="s5" @click="add_money(500)"></span>
        <span class="s6" @click="add_money(1000)"></span>
      </div>
      <button type="button" class="one"><span class="left">金额￥</span><I-Input @on-change="change_money()" :maxlength="9" style="width: 100px" size="small"
                                                                            v-model="money" @on-keyup="push_money()"
                                                                            @on-afterpaste="push_money()"></I-Input>
      </button>
      <button type="button" class="two" style="padding: 8px;" @click="go_to()">立即下注</button>
      <button type="button" class="two" style="padding: 8px;margin-right:20px;" @click="reset()">重置</button>
    </div>
    <Me-Modal :modal="modal" @cancel="cancel"></Me-Modal>
  </div>
</template>

<script>
  import api from "../../../api/config";
  import MeModal from "../../../share_components/bet";
  //import back from './ten_data'
  import {Input, Modal} from 'iview'
  export default {
    components: { MeModal,'I-Input':Input,Modal},
    props: {
      toplist: {
        type: Array
      },
      centerlist: {
        type: Array
      },
      c_data: {
        type: Object
      }
    },
    data() {
      return {
        money: "",
        modal: false
      };
    },

    watch: {
      // 如果路由有变化，会再次执行该方法
      $route: "reset" // 只有这个页面初始化之后，这个监听事件才开始生成
    },
    created() {
      this.reset();
      this.$root.$on("success", e => {
        if (e) {
          this.modal = false;
          this.reset();
        }
      });
    },

    methods: {
      myclick: function(item, i) {
        console.log(item);
        console.log(item.flag);
        if(item.money && item.flag == true){
          item.flag = false;
          item.money = '';
          this.$refs.myfocus[item.index].blur()
        }else if(item.money == '' && item.flag == false){
          this.$refs.myfocus[item.index].focus();
        }else if (item.flag == true && item.money == ''){
          item.flag = false;
        }else if (item.flag == true){
          item.money = this.money;
        }
      },
      onfocus: function(item){
        if(item.flag == false && item.money == ''){
          item.flag = true;
          item.money = this.money;
        }
      },

      cancel: function (item) {
        this.modal = false;
        document.querySelector("body").style.overflow = "auto";
      },
      push_money: function () {
        this.money = this.money.replace(/\D/g, "");
        this.computed_money();
      },
      change_money: function () { this.computed_money() },
      go_to() {
        let a = this.money + 'a';
        this.money = a.replace(/\D/g, "");
        var kk = 0;
        //list
        for (let i = 0; i < this.toplist.length; i++) {
          for (let j = 0; j < this.toplist[i].object.length; j++) {
            let b = this.toplist[i].object[j].money + 'b';
            this.toplist[i].object[j].money = b.replace(/\D/g, "");
            kk += Number(this.toplist[i].object[j].money);
          }
        }
        //list2
        for (let i = 0; i < this.centerlist.length; i++) {
          for (let j = 0; j < this.centerlist[i].object.length; j++) {
            let c = this.centerlist[i].object[j].money + 'c';
            this.centerlist[i].object[j].money = c.replace(/\D/g, "");
            kk += Number(this.centerlist[i].object[j].money);
          }
        }
        //list3
        //console.log('kk:' + kk);
        if (kk != 0) {
          this.modal = true;
          document.querySelector("body").style.overflow = "hidden";
          var arr = this.toplist.concat(this.centerlist);
          this.$root.$emit("c_data", this.c_data);
          this.$root.$emit("id-selected", arr);
        } else if (kk == 0) {
          this.$Modal.warning({
            content: "请先下注"
          });
          window.setTimeout(() => {
            this.$Modal.remove()
          }, 500)
        }
      },
      computed_money() {
        //list
        for (let i = 0; i < this.toplist.length; i++) {
          for (let j = 0; j < this.toplist[i].object.length; j++) {
            //添加金额参数入对象
            if (this.toplist[i].object[j].flag) {
              this.toplist[i].object[j].money = this.money;
            }
          }
        }
        for (let i = 0; i < this.centerlist.length; i++) {
          for (let j = 0; j < this.centerlist[i].object.length; j++) {
            //添加金额参数入对象
            if (this.centerlist[i].object[j].flag) {
              this.centerlist[i].object[j].money = this.money;
            }
          }
        }
      },
      reset() {
        for (let i = 0; i < this.toplist.length; i++) {
          for (let j = 0; j < this.toplist[i].object.length; j++) {
            this.toplist[i].object[j].money = "";
            this.toplist[i].object[j].flag = false;
          }
        }
        for (let i = 0; i < this.centerlist.length; i++) {
          for (let j = 0; j < this.centerlist[i].object.length; j++) {
            this.centerlist[i].object[j].money = "";
            this.centerlist[i].object[j].flag = false;
          }
        }
        this.money = "";
        this.$root.$emit("reset", "");
      },
      //按键tab
      tab_now: function(key) {
        if (!key.money) {
          key.flag = false;
        } else if (key.money) {
          key.flag = true;
        }
      },
      //监听input值得变化
      onchange: function(key) {
        if (!key.money) {
          key.flag = false;
        } else if (key.money) {
          key.flag = true;
        }
      },
      //每个球对应的输入框
      gogo: function(key) {
        key.money = key.money.replace(/\D/g, "");
      },
      add_money: function (type) {
        let money = this.money;
        this.money = Number(money) + type;
        this.computed_money();
      }
    }
  };
</script>

<style lang="scss" src="../../../assets/css/happy_too.scss" scoped></style>
