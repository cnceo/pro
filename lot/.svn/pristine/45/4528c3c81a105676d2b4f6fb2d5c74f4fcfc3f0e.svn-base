<?php

ini_set("memory_limit", "-1");

use \Workerman\Worker;
use \Workerman\Connection\AsyncTcpConnection;
use \helper\MysqlPdo as pdo;
use \helper\RedisConPool;
use \helper\Common_helper;
use \helper\Curl;

require_once __DIR__ . '/../../Workerman/Autoloader.php';

Worker::$stdoutFile = __DIR__ . '/../../logs/worker.log';

$worker = new Worker('http://0.0.0.0:10002');
$worker->name = 'betApi';

$worker->onWorkerStart = function($worker) {
    // echo 'common start now' . PHP_EOL;
};

$worker->onMessage = function($connection, $data) {
    $post = $data['post'];
    //获取所有彩种玩法结果
    if ($post['todo'] == 'get_res') {
        $balls = isset($post['balls']) ? $post['balls'] : false;
        $fc_type = isset($post['fc_type']) ? $post['fc_type'] : false;
        if (!$balls || !$fc_type) {
            $result['ErrorMsg'] = '进程：参数错误';
            $connection->send(json_encode($result));
            return;
        }
        $class = 'libraries\auto\\' . ucfirst($fc_type) . 'Auto';
        $result['ErrorCode'] = 2;
        $auto_res = array();
        $auto_res = $class::get_auto($balls);
        if (empty($auto_res)) {
            $result['ErrorMsg'] = '获取玩法数组失败';
            $connection->send(json_encode($result));
            return;
        }
        $connection->send(json_encode($auto_res));
        return;
    }

    //补彩开奖结果
    if ($post['todo'] == 'getauto') {
        $manage = pdo::instance('manage');
        $result['ErrorCode'] = 2;
        //获取所有数据
        $fc_type = isset($post['fc_type']) ? $post['fc_type'] : null;
        $time = isset($post['time']) ? $post['time'] : null;
        if (empty($time) || empty($fc_type)) {
            $result['ErrorMsg'] = '进程：参数错误';
            $connection->send(json_encode($result));
            return false;
        } else {
            $time = date('Ymd', $time); //转换成接口需要的时间格式
        }
        $spideclass = 'libraries\spider\\' . $fc_type;
        $data = $spideclass::getContinueData($time);
        if (empty($data)) {
            $result['ErrorMsg'] = '暂未取得数据，请稍候重试';
            $connection->send(json_encode($result));
            return false;
        }
        //查询是否在数据库中存在
        $count = count($data) - 1;
        if ((!isset($data[$count]['expect'])) || (!isset($data[0]['expect']))) {
            $result['ErrorMsg'] = '暂未取得有效数据，请稍候重试';
            $connection->send(json_encode($result));
            return false;
        }
        $small_qishu = $data[$count]['expect'];
        $big_qishu = $data[0]['expect'];
        $auto_table = Common_helper::GetAutoTableNameByType($fc_type);

        $qishu_arr = array();
        $sql = 'select qishu from ' . $auto_table . ' where qishu between ' . $small_qishu . ' and ' . $big_qishu;
        $qishu_arr = $manage->query($sql);
        if (!empty($qishu_arr)) {
            foreach ($qishu_arr as $key => $val) {
                $qishu_arr[$key] = $val['qishu'];
            }
        }

        $auto_table = Common_helper::GetAutoTableNameByType($fc_type);
        $qishu_list = array();

        $return = array();
        foreach ($data as $key => $val) {
            if ($qishu_arr) {//检测数据库中该期结果是否存在
                if (in_array($val['expect'], $qishu_arr)) {
                    continue;
                }
            }
            $qishu_list[] = $val['expect']; //用于处理结算
            $open_time = strtotime($val["opentime"]);
            $open_res = explode(',', $val["opencode"]);
            $class = 'libraries\auto\\' . ucfirst($fc_type) . 'Auto';
            $auto_res = array();
            $auto_res = $class::get_auto($open_res);
            if (empty($auto_res)) {
                $result['ErrorMsg'] = '获取玩法数组失败';
                $connection->send(json_encode($result));
                return;
            }
            $auto_res['qishu'] = $val['expect'];
            $auto_res['datetime'] = $open_time;
            $auto_res['addtime'] = time();
            $return[] = $auto_res;
        }
        //返回数据
        if (!empty($return)) {
            $result['ErrorCode'] = 1;
            $result['ErrorMsg'] = '补采数据成功';
            $result['qishu_list'] = $qishu_list;
            $result['balls'] = $return;
            $connection->send(json_encode($result));
            return true;
        } else {
            $result['ErrorMsg'] = '该彩种当天没有遗漏数据';
            $connection->send(json_encode($result));
            return false;
        }
        return false;
    }



    //此模块主要应用于单条数据结算
    $id = isset($post['id']) ? $post['id'] : null;
    $periods = isset($post['periods']) ? $post['periods'] : null; //期数
    $fc_type = isset($post['fc_type']) ? $post['fc_type'] : null; //彩种

    $class = '\libraries\balance\\' . ucfirst($fc_type) . 'Balance';
    $lottery = pdo::instance('lottery');
    $table = Common_helper::GetBetTableNameByType($fc_type); //获取注单表名
    $time = $class::getTimeByQishu($periods); //获取当前期数的开盘时间
    $auto_table = Common_helper::GetAutoTableNameByType($fc_type); //获取开奖结果表名


    if ($post['todo'] == 'balance') {
        if (is_array($id) && is_numeric($periods) && $fc_type) {
            //处理id数组 至 字符串
            $id_str = '';
            foreach ($id as $v) {
                if (is_numeric($v)) {
                    $id_str .= $v . ',';
                } else {
                    
                }
            }
            $id = rtrim($id_str, ',');
            $sql = "select * from $table where addtime>='$time' and id in($id) and js=1 and status=1 and periods='$periods' order by addtime asc";
            $bet_info = $lottery->query($sql);
            if (!$bet_info) {
                $result['ErrorMsg'] = '并非有效的未结算注单,可能原因(投注时间不对等非法注单)';
                $result['ErrorCode'] = 2;
                $connection->send(json_encode($result));
                return false;
            }
            $class = '\libraries\balance\\' . ucfirst($fc_type) . 'Balance';
            $class::$bets[$periods] = $bet_info;
            $class::$run[$periods] = 1;
            $res = Common_helper::BalanceByType($fc_type, $periods, $id); //根据type和期数 进入结算
            if ($res) {
                if ($res['ErrorCode'] == 1 || $res['ErrorCode'] == 2) {
                    $connection->send(json_encode($res));
                    return true;
                } else {
                    $result['ErrorMsg'] = '结算进程：结算失败';
                    $result['ErrorCode'] = 2;
                    $connection->send(json_encode($result));
                    return false;
                }
            } else {
                $result['ErrorMsg'] = '结算进程：结算失败';
                $result['ErrorCode'] = 2;
                $connection->send(json_encode($result));
                return false;
            }
        } else {
            $result['ErrorMsg'] = '单条结算数据不合法';
            $result['ErrorCode'] = 2;
            $connection->send(json_encode($result));
            return false;
        }
    }


    //注单回滚
    if ($post['todo'] == 'rollback') {
        if (is_array($id) && is_numeric($periods) && $fc_type) {
            //处理id数组 至 字符串
            $id_count = count($id);
            $id_str = '';
            foreach ($id as $v) {
                if (is_numeric($v)) {
                    $id_str .= $v . ',';
                } else {
                    // echo 'Can not Know id: ' . $v;
                }
            }
            $id = rtrim($id_str, ',');
            $res = Common_helper::rollback($fc_type, $periods, $id); //单条回滚
            if ($res['ErrorCode'] == 1 || $res['ErrorCode'] == 2) {
                $connection->send(json_encode($res));
                return;
            } else {
                $result['ErrorMsg'] = '注单回滚失败';
                $result['ErrorCode'] = 2;
                $connection->send(json_encode($result));
                return;
            }
        } elseif (is_numeric($periods) && $fc_type) {//批量回滚
            $res = Common_helper::rollback($fc_type, $periods);
            if ($res['ErrorCode'] == 1 || $res['ErrorCode'] == 2) {
                $connection->send(json_encode($res));
                return;
            } else {
                $result['ErrorMsg'] = $periods . '注单整期回滚失败';
                $result['ErrorCode'] = 2;
                $connection->send(json_encode($result));
                return;
            }
        } else {
            $result['ErrorMsg'] = '回滚数据不合法';
            $result['ErrorCode'] = 2;
            $connection->send(json_encode($result));
            return;
        }
    }


    //手工输入期数后批量结算 主要用于结算回滚注单及结算失败的注单
    if ($post['todo'] == 'allbalance') {
        if (is_numeric($periods) && $fc_type) {
            //尝试从内存中读取数据
            $class::$run[$periods] = 1;
            $port = Common_helper::getPort($fc_type);
            $port = $port[1];
            $data = Curl::run('http://127.0.0.1:' . $port, 'post', array(
                        'todo' => 'get',
                        'type' => $fc_type,
                        'qishu' => $periods
            ));
            if ($data) {
                $data = json_decode($data, true);
                $bets = isset($data['bets']) ? $data['bets'] : array();
                if ($bets) {
                    $res = Common_helper::BalanceByType($fc_type, $periods, '', $bets);
                } else {
                    $res = Common_helper::BalanceByType($fc_type, $periods);
                }
            } else {
                $res = Common_helper::BalanceByType($fc_type, $periods);
            }


            if ($res['ErrorCode'] == 1 || $res['ErrorCode'] == 2) {
                $connection->send(json_encode($res));
                return true;
            } else if ($res == true) {
                $result['ErrorMsg'] = '结算进程：结算成功';
                $result['ErrorCode'] = 1;
                $connection->send(json_encode($result));
                return;
            } else {
                $result['ErrorMsg'] = '结算进程：结算失败';
                $result['ErrorCode'] = 2;
                $connection->send(json_encode($result));
                return false;
            }
        } else {
            $result['ErrorMsg'] = '整期数据不合法';
            $result['ErrorCode'] = 2;
            $connection->send(json_encode($result));
            return false;
        }
    }


    $result['ErrorMsg'] = '非法指令，无法处理';
    $result['ErrorCode'] = 2;
    $connection->send(json_encode($result));
    return false;
};



// 运行worker
if(!defined('GLOBAL_START')) {
    Worker::runAll();
}
?>