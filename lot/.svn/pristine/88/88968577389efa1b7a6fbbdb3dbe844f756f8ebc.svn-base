package global

import (
	"crypto/md5"
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"git.oschina.net/dxvgef/go-lib/convert"
	"strconv"
	"time"
)

type (
	AuthTokenKey struct {
		Id       int    `json:"id"`
		Username string `json:"username"`
		Type     string `json:"type"`
	}
	AuthTokenValue struct{} //redis里登录value
)

var EncryptSalt string = "ocpB8nZG5yBWrMfJDsM2fRB5L5LERMF47A6PWAC4wpM="

//从[]byte生成md5密文
func MD5ByBytes(value []byte, salt ...[]byte) (result string, err error) {
	var s []byte
	if len(salt) > 0 {
		s = salt[0]
	}
	h := md5.New()
	_, err = h.Write(value)
	if err != nil {
		return
	}
	if s != nil {
		_, err = h.Write(s)
		if err != nil {
			return
		}
	}
	result = hex.EncodeToString(h.Sum(nil))
	return
}

//从str生成md5密文
func MD5ByStr(value string, salt ...string) (result string, err error) {
	var s []byte
	if len(salt) > 0 {
		s = convert.StrToByte(salt[0])
	}
	h := md5.New()
	_, err = h.Write(convert.StrToByte(value))
	if err != nil {
		return
	}
	if s != nil {
		_, err = h.Write(s)
		if err != nil {
			return
		}
	}
	result = hex.EncodeToString(h.Sum(nil))
	return
}

func EncryptAuthKey(key *AuthTokenKey) (token string, err error) {
	token, err = MD5ByStr(strconv.Itoa(key.Id), key.Username, key.Type, EncryptSalt, time.Now().String())
	return
}

func EncryptAuthToken(value *AuthTokenValue) (token string, err error) {
	authTokenBytes, err := json.Marshal(value)
	if err != nil {
		return
	}
	token = base64.URLEncoding.WithPadding(base64.NoPadding).EncodeToString(authTokenBytes)
	return
}

func ParseAuthToken(tokenStr string) (*AuthTokenValue, error) {
	var token AuthTokenValue
	var err error
	authTokenBytes, err := base64.URLEncoding.WithPadding(base64.NoPadding).DecodeString(tokenStr)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(authTokenBytes, &token)
	if err != nil {
		return nil, err
	}
	return &token, nil
}

//从str生成Base64密文
func EncryptBase64Str(val, SiteId string) (token string) {
	val = val + SiteId
	valarr := []byte(val)
	token = base64.URLEncoding.WithPadding(base64.NoPadding).EncodeToString(valarr)
	return
}

//从Base64密文中解密字符串
func ParseBase64Str(val, SiteId string) (token string, err error) {
	tokenStr, err := base64.URLEncoding.WithPadding(base64.NoPadding).DecodeString(val)
	var tokenlen = len(tokenStr) - len(SiteId)
	token = string(tokenStr[:tokenlen])
	return
}
