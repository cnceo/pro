package framework

import (
	"config"
	"framework/app"
	"github.com/labstack/echo"
	"github.com/labstack/echo/middleware"
	"router"
)

func NewApp(cfg *config.Config) (*app.App, error) {
	a := new(app.App)

	a.Cfg = cfg
	a.WebServer = echo.New()
	a.WebServer.HideBanner = true
	//跨域的自定义response的headers的暴露
	defaultCORSConfig := middleware.DefaultCORSConfig
	defaultCORSConfig.ExposeHeaders = append(defaultCORSConfig.ExposeHeaders, "Code")
	defaultCORSConfig.ExposeHeaders = append(defaultCORSConfig.ExposeHeaders, "Platform")
	defaultCORSConfig.ExposeHeaders = append(defaultCORSConfig.ExposeHeaders, "Domain")
	//中间件
	//可以支持跨域请求
	a.WebServer.Use(middleware.CORSWithConfig(defaultCORSConfig))
	//
	a.WebServer.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{
		StackSize: 20 << 10, // 1 KB
	}))
	//路由
	a.WebServer.GET("/favicon.ico", func(ctx echo.Context) error {
		return ctx.NoContent(204)
	})
	//测试版本
	a.WebServer.GET("/version/test", func(ctx echo.Context) error {
		return ctx.String(200, cfg.Version.Test)
	})
	//线上版本
	a.WebServer.GET("/version/product", func(ctx echo.Context) error {
		return ctx.String(200, cfg.Version.Product)
	})
	router.Lottery(a.WebServer)

	return a, nil
}


func NewSpiderApp(cfg *config.Config) (*app.App, error) {
	a := new(app.App)

	a.Cfg = cfg
	a.WebServer = echo.New()
	a.WebServer.HideBanner = true
	//跨域的自定义response的headers的暴露
	defaultCORSConfig := middleware.DefaultCORSConfig
	defaultCORSConfig.ExposeHeaders = append(defaultCORSConfig.ExposeHeaders, "Code")
	defaultCORSConfig.ExposeHeaders = append(defaultCORSConfig.ExposeHeaders, "Platform")
	defaultCORSConfig.ExposeHeaders = append(defaultCORSConfig.ExposeHeaders, "Domain")
	//中间件
	//可以支持跨域请求
	a.WebServer.Use(middleware.CORSWithConfig(defaultCORSConfig))
	//
	a.WebServer.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{
		StackSize: 20 << 10, // 1 KB
	}))
	//路由
	a.WebServer.GET("/favicon.ico", func(ctx echo.Context) error {
		return ctx.NoContent(204)
	})
	//测试版本
	a.WebServer.GET("/version/test", func(ctx echo.Context) error {
		return ctx.String(200, cfg.Version.Test)
	})
	//线上版本
	a.WebServer.GET("/version/product", func(ctx echo.Context) error {
		return ctx.String(200, cfg.Version.Product)
	})
	router.SpiderRouter(a.WebServer)

	return a, nil
}
